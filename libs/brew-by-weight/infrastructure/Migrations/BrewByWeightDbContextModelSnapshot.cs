// <auto-generated />
using System;
using MicraPro.BrewByWeight.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicraPro.BrewByWeight.Infrastructure.Migrations
{
    [DbContext(typeof(BrewByWeightDbContext))]
    partial class BrewByWeightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BeanId")
                        .HasColumnType("TEXT");

                    b.Property<double>("CoffeeQuantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<double>("GrindSetting")
                        .HasColumnType("REAL");

                    b.Property<double>("InCupQuantity")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ScaleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Spout")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TargetExtractionTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProcessEntries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProcessDb");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessRuntimeDataDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Flow")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessRuntimeDataEntries");
                });

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.CancelledProcessDb", b =>
                {
                    b.HasBaseType("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessDb");

                    b.Property<double>("AverageFlow")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.ToTable("ProcessEntries", t =>
                        {
                            t.Property("AverageFlow")
                                .HasColumnName("CancelledProcessDb_AverageFlow");

                            t.Property("TotalQuantity")
                                .HasColumnName("CancelledProcessDb_TotalQuantity");

                            t.Property("TotalTime")
                                .HasColumnName("CancelledProcessDb_TotalTime");
                        });

                    b.HasDiscriminator().HasValue("CancelledProcessDb");
                });

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.FailedProcessDb", b =>
                {
                    b.HasBaseType("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessDb");

                    b.Property<double>("AverageFlow")
                        .HasColumnType("REAL");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.ToTable("ProcessEntries", t =>
                        {
                            t.Property("AverageFlow")
                                .HasColumnName("FailedProcessDb_AverageFlow");

                            t.Property("TotalQuantity")
                                .HasColumnName("FailedProcessDb_TotalQuantity");
                        });

                    b.HasDiscriminator().HasValue("FailedProcessDb");
                });

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.FinishedProcessDb", b =>
                {
                    b.HasBaseType("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessDb");

                    b.Property<double>("AverageFlow")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("ExtractionTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("FinishedProcessDb");
                });

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessRuntimeDataDb", b =>
                {
                    b.HasOne("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessDb", "Process")
                        .WithMany("RuntimeData")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("MicraPro.BrewByWeight.Domain.StorageAccess.ProcessDb", b =>
                {
                    b.Navigation("RuntimeData");
                });
#pragma warning restore 612, 618
        }
    }
}
