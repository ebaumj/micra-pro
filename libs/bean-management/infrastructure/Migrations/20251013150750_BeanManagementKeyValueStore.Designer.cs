// <auto-generated />
using System;
using MicraPro.BeanManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicraPro.BeanManagement.Infrastructure.Migrations
{
    [DbContext(typeof(BeanManagementDbContext))]
    [Migration("20251013150750_BeanManagementKeyValueStore")]
    partial class BeanManagementKeyValueStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.BeanDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoasteryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoasteryId");

                    b.ToTable("BeanEntries");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.RecipeDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BeanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeanId");

                    b.ToTable("RecipeEntries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecipeDb");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.RoasteryDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoasteryEntries");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Infrastructure.StorageAccess.KeyValueEntry", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("KeyValueEntries");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.EspressoRecipeDb", b =>
                {
                    b.HasBaseType("MicraPro.BeanManagement.Domain.StorageAccess.RecipeDb");

                    b.Property<double>("BrewTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("CoffeeQuantity")
                        .HasColumnType("REAL");

                    b.Property<double>("GrindSetting")
                        .HasColumnType("REAL");

                    b.Property<double>("InCupQuantity")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("TargetExtractionTime")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("EspressoRecipeDb");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.V60RecipeDb", b =>
                {
                    b.HasBaseType("MicraPro.BeanManagement.Domain.StorageAccess.RecipeDb");

                    b.Property<double>("BrewTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("CoffeeQuantity")
                        .HasColumnType("REAL");

                    b.Property<double>("GrindSetting")
                        .HasColumnType("REAL");

                    b.Property<double>("InCupQuantity")
                        .HasColumnType("REAL");

                    b.ToTable("RecipeEntries", t =>
                        {
                            t.Property("BrewTemperature")
                                .HasColumnName("V60RecipeDb_BrewTemperature");

                            t.Property("CoffeeQuantity")
                                .HasColumnName("V60RecipeDb_CoffeeQuantity");

                            t.Property("GrindSetting")
                                .HasColumnName("V60RecipeDb_GrindSetting");

                            t.Property("InCupQuantity")
                                .HasColumnName("V60RecipeDb_InCupQuantity");
                        });

                    b.HasDiscriminator().HasValue("V60RecipeDb");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.BeanDb", b =>
                {
                    b.HasOne("MicraPro.BeanManagement.Domain.StorageAccess.RoasteryDb", "RoasteryObject")
                        .WithMany("Beans")
                        .HasForeignKey("RoasteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoasteryObject");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.RecipeDb", b =>
                {
                    b.HasOne("MicraPro.BeanManagement.Domain.StorageAccess.BeanDb", "BeanObject")
                        .WithMany("Recipes")
                        .HasForeignKey("BeanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeanObject");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.BeanDb", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("MicraPro.BeanManagement.Domain.StorageAccess.RoasteryDb", b =>
                {
                    b.Navigation("Beans");
                });
#pragma warning restore 612, 618
        }
    }
}
